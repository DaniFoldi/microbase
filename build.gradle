plugins {
    id 'java'
    id 'maven-publish'
}

group 'com.danifoldi'
version '0.7.1'

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

repositories {
    mavenCentral()
    maven { url 'https://repo.danifoldi.com/repository/maven-releases/' }
    maven { url 'https://papermc.io/repo/repository/maven-public/' }
    maven { url 'https://nexus.velocitypowered.com/repository/maven-public/' }
    maven { url 'https://repo.viaversion.com' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.19.2-R0.1-SNAPSHOT'
    compileOnly 'io.github.waterfallmc:waterfall-api:1.19-R0.1-SNAPSHOT'
    compileOnly 'com.velocitypowered:velocity-api:3.1.1'

    compileOnly 'net.kyori:adventure-platform-bukkit:4.3.0'
    compileOnly 'net.kyori:adventure-platform-bungeecord:4.3.0'

    compileOnly 'com.viaversion:viaversion-api:4.6.2'
    compileOnly 'com.github.LeonMangler:PremiumVanishAPI:2.7.11-2'

    implementation 'com.danifoldi:DML:1.0.2'
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'microbase'
            from components.java
            artifact sourcesJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'microbase'
                description = 'A multiplatform base for Minecraft'
                url = 'https://github.com/DaniFoldi/microbase'
            }

            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.default.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}